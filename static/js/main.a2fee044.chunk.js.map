{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","products","setProducts","formats","setFormats","papers","setPapers","isProductsLoading","setIsProductsLoading","isFormatsLoading","setIsFormatsLoading","isPapersLoading","setIsPapersLoading","error","setError","useEffect","fetchFormats","a","fetch","headers","res","json","data","fetchPapers","then","console","log","ok","Error","catch","err","message","className","map","product","productFormat","filter","item","id","formatId","productPapers","paperId","style","marginBottom","productId","typeName","format","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOA0GeA,MAvGf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkDN,oBAAS,GAA3D,mBAAOO,EAAP,KAA0BC,EAA1B,KACA,EAAgDR,oBAAS,GAAzD,mBAAOS,EAAP,KAAyBC,EAAzB,KACA,EAA8CV,oBAAS,GAAvD,mBAAOW,EAAP,KAAwBC,EAAxB,KACA,EAA0BZ,mBAAS,MAAnC,mBAAOa,EAAP,KAAcC,EAAd,KA2DA,OAzDAC,qBAAU,WACR,IA2BMC,EAAY,uCAAG,8BAAAC,EAAA,6DACnBP,GAAoB,GADD,SAEDQ,MAAM,iFAAkF,CACxGC,QAAS,CACP,KAAQ,aAJO,cAEbC,EAFa,gBAOAA,EAAIC,OAPJ,OAObC,EAPa,OAQnBlB,EAAWkB,EAAKnB,SAChBO,GAAoB,GATD,2CAAH,qDAYZa,EAAW,uCAAG,8BAAAN,EAAA,6DAClBL,GAAmB,GADD,SAEAM,MAAM,gFAAiF,CACvGC,QAAS,CACP,KAAQ,aAJM,cAEZC,EAFY,gBAOCA,EAAIC,OAPL,OAOZC,EAPY,OAQlBhB,EAAUgB,EAAKjB,QACfO,GAAmB,GATD,2CAAH,qDAtCfJ,GAAqB,GAErBU,MAAM,8EAA+E,CACnFC,QAAS,CACP,KAAQ,aAGTK,MAAK,SAAAJ,GAEJ,GADAK,QAAQC,IAAIN,IACPA,EAAIO,GACP,MAAMC,MAAM,yEAEd,OAAOR,EAAIC,UAEZG,MAAK,SAAAF,GACJpB,EAAYoB,EAAKrB,UACjBO,GAAqB,GACrBM,EAAS,SAEVe,OAAM,SAAAC,GACLhB,EAASgB,EAAIC,SACbvB,GAAqB,MA8B3BQ,IACAO,MACC,IAGD,sBAAKS,UAAU,MAAf,UACGnB,GAAS,4BAAIA,IACbN,GAAqB,uDAEpBN,GAAYA,EAASgC,KAAI,SAACC,GAExB,IAAMC,EAAgBhC,GAAWA,EAAQiC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAQK,YACtEC,EAAgBnC,EAAO+B,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAQO,WAEhE,OACE,sBAA6BC,MAAO,CAAEC,aAAc,QAApD,UACE,gCACE,mDAA4B,+BAAOT,EAAQU,eAE7C,gCACE,6CAAsB,+BAAOV,EAAQA,aAEvC,gCACE,yCAAkB,+BAAQzB,EAA+C,oBAA5B0B,EAAc,GAAGU,cAEhE,gCACE,4CAAqB,+BAAQpC,EAA6C,uBAA1B0B,EAAc,GAAGW,YAEnE,gCACE,4CAAqB,+BAAQnC,EAA0C,uBAAxB6B,EAAc,GAAGO,YAd1Db,EAAQU,kBCrEfI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a2fee044.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n  const [products, setProducts] = useState([]);\n  const [formats, setFormats] = useState([]);\n  const [papers, setPapers] = useState([]);\n  const [isProductsLoading, setIsProductsLoading] = useState(false);\n  const [isFormatsLoading, setIsFormatsLoading] = useState(false);\n  const [isPapersLoading, setIsPapersLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchProducts = () => {\n      setIsProductsLoading(true);\n\n      fetch('https://thingproxy.freeboard.io/fetch/https://www.empikfoto.pl/product/list', {\n        headers: {\n          \"mode\": \"no-cors\",\n        }\n      })\n        .then(res => {\n          console.log(res);\n          if (!res.ok) {\n            throw Error(\"Ups coś poszło nie tak, spróbuj ponownie później\");\n          }\n          return res.json();\n        })\n        .then(data => {\n          setProducts(data.products);\n          setIsProductsLoading(false);\n          setError(null);\n        })\n        .catch(err => {\n          setError(err.message);\n          setIsProductsLoading(false);\n        })\n\n    };\n\n    const fetchFormats = async () => {\n      setIsFormatsLoading(true);\n      const res = await fetch('https://thingproxy.freeboard.io/fetch/https://www.empikfoto.pl/product/formats', {\n        headers: {\n          \"mode\": \"no-cors\",\n        }\n      });\n      const data = await res.json();\n      setFormats(data.formats);\n      setIsFormatsLoading(false);\n    };\n\n    const fetchPapers = async () => {\n      setIsPapersLoading(true);\n      const res = await fetch('https://thingproxy.freeboard.io/fetch/https://www.empikfoto.pl/product/papers', {\n        headers: {\n          \"mode\": \"no-cors\",\n        }\n      });\n      const data = await res.json();\n      setPapers(data.papers);\n      setIsPapersLoading(false);\n    };\n\n    fetchProducts();\n    fetchFormats();\n    fetchPapers();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {error && <p>{error}</p>}\n      {isProductsLoading && <p>Wczytuję produkty</p>}\n      {\n        products && products.map((product) => {\n\n          const productFormat = formats && formats.filter(item => item.id === product.formatId);\n          const productPapers = papers.filter(item => item.id === product.paperId);\n\n          return (\n            <div key={product.productId} style={{ marginBottom: \"20px\" }}>\n              <div>\n                <span>Identyfikator: </span><span>{product.productId}</span>\n              </div>\n              <div>\n                <span>Produkt: </span><span>{product.product}</span>\n              </div>\n              <div>\n                <span>Typ: </span><span>{!isFormatsLoading ? productFormat[0].typeName : \"Wczytuję typ\"}</span>\n              </div>\n              <div>\n                <span>Format: </span><span>{!isFormatsLoading ? productFormat[0].format : \"Wczytuję format\"}</span>\n              </div>\n              <div>\n                <span>Papier: </span><span>{!isPapersLoading ? productPapers[0].name : \"Wczytuję papier\"}</span>\n              </div>\n\n            </div>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}